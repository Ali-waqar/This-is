"use strict";

var _regeneratorRuntime = require("/vercel/path0/node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = require("/vercel/path0/node_modules/@babel/runtime/helpers/asyncToGenerator.js");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createSignOut = exports.createGetToken = void 0;
/**
 * @internal
 */

var clerkLoaded = function clerkLoaded(isomorphicClerk) {
    return new Promise(function(resolve) {
        if (isomorphicClerk.loaded) {
            resolve();
        }

        isomorphicClerk.addOnLoaded(resolve);
    });
};
/**
 * @internal
 */


var createGetToken = function createGetToken(isomorphicClerk) {
    return /*#__PURE__*/ function() {
        var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(options) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return clerkLoaded(isomorphicClerk);

                        case 2:
                            if (isomorphicClerk.session) {
                                _context.next = 4;
                                break;
                            }

                            return _context.abrupt("return", null);

                        case 4:
                            return _context.abrupt("return", isomorphicClerk.session.getToken(options));

                        case 5:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee);
        }));

        return function(_x) {
            return _ref.apply(this, arguments);
        };
    }();
};

exports.createGetToken = createGetToken;
/**
 * @internal
 */

var createSignOut = function createSignOut(isomorphicClerk) {
    return /*#__PURE__*/ _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
        var _args2 = arguments;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return clerkLoaded(isomorphicClerk);

                    case 2:
                        return _context2.abrupt("return", isomorphicClerk.signOut.apply(isomorphicClerk, _args2));

                    case 3:
                    case "end":
                        return _context2.stop();
                }
            }
        }, _callee2);
    }));
};

exports.createSignOut = createSignOut;