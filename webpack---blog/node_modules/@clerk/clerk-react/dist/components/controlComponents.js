"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MultisessionAppSupport = exports.AuthenticateWithRedirectCallback = exports.RedirectToUserProfile = exports.RedirectToSignUp = exports.RedirectToSignIn = exports.ClerkLoading = exports.ClerkLoaded = exports.SignedOut = exports.SignedIn = void 0;

var tslib_1 = require("tslib");

var react_1 = tslib_1.__importDefault(require("react"));

var AuthContext_1 = require("../contexts/AuthContext");

var IsomorphicClerkContext_1 = require("../contexts/IsomorphicClerkContext");

var SessionContext_1 = require("../contexts/SessionContext");

var StructureContext_1 = require("../contexts/StructureContext");

var withClerk_1 = require("./withClerk");

var SignedIn = function SignedIn(_ref) {
    var children = _ref.children;

    var _ref2 = (0, AuthContext_1.useAuthContext)(),
        userId = _ref2.userId;

    if (userId) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }

    return null;
};

exports.SignedIn = SignedIn;

var SignedOut = function SignedOut(_ref3) {
    var children = _ref3.children;

    var _ref4 = (0, AuthContext_1.useAuthContext)(),
        userId = _ref4.userId;

    if (userId === null) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }

    return null;
};

exports.SignedOut = SignedOut;

var ClerkLoaded = function ClerkLoaded(_ref5) {
    var children = _ref5.children;
    var isomorphicClerk = (0, IsomorphicClerkContext_1.useIsomorphicClerkContext)();

    if (!isomorphicClerk.loaded) {
        return null;
    }

    return react_1.default.createElement(StructureContext_1.LoadedGuarantee, null, children);
};

exports.ClerkLoaded = ClerkLoaded;

var ClerkLoading = function ClerkLoading(_ref6) {
    var children = _ref6.children;
    var isomorphicClerk = (0, IsomorphicClerkContext_1.useIsomorphicClerkContext)();

    if (isomorphicClerk.loaded) {
        return null;
    }

    return react_1.default.createElement(react_1.default.Fragment, null, children);
};

exports.ClerkLoading = ClerkLoading;
exports.RedirectToSignIn = (0, withClerk_1.withClerk)(function(_a) {
    var clerk = _a.clerk,
        props = tslib_1.__rest(_a, ["clerk"]);

    var client = clerk.client,
        session = clerk.session; // TODO: Remove temp use of __unstable__environment

    var __unstable__environment = clerk.__unstable__environment;
    var hasActiveSessions = client.activeSessions && client.activeSessions.length > 0;
    react_1.default.useEffect(function() {
        if (session === null && hasActiveSessions && __unstable__environment) {
            var afterSignOutOneUrl = __unstable__environment.displayConfig.afterSignOutOneUrl;
            void clerk.navigate(afterSignOutOneUrl);
        } else {
            void clerk.redirectToSignIn(props);
        }
    }, []);
    return null;
}, 'RedirectToSignIn');
exports.RedirectToSignUp = (0, withClerk_1.withClerk)(function(_a) {
    var clerk = _a.clerk,
        props = tslib_1.__rest(_a, ["clerk"]);

    react_1.default.useEffect(function() {
        void clerk.redirectToSignUp(props);
    }, []);
    return null;
}, 'RedirectToSignUp');
exports.RedirectToUserProfile = (0, withClerk_1.withClerk)(function(_ref7) {
    var clerk = _ref7.clerk;
    react_1.default.useEffect(function() {
        clerk.redirectToUserProfile();
    }, []);
    return null;
}, 'RedirectToUserProfile');
exports.AuthenticateWithRedirectCallback = (0, withClerk_1.withClerk)(function(_a) {
    var clerk = _a.clerk,
        handleRedirectCallbackParams = tslib_1.__rest(_a, ["clerk"]);

    react_1.default.useEffect(function() {
        void clerk.handleRedirectCallback(handleRedirectCallbackParams);
    }, []);
    return null;
}, 'AuthenticateWithRedirectCallback');

var MultisessionAppSupport = function MultisessionAppSupport(_ref8) {
    var children = _ref8.children;
    var session = (0, SessionContext_1.useSessionContext)();
    return react_1.default.createElement(react_1.default.Fragment, {
        key: session ? session.id : 'no-users'
    }, children);
};

exports.MultisessionAppSupport = MultisessionAppSupport;