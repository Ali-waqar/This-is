"use strict";

var _regeneratorRuntime = require("/vercel/path0/node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = require("/vercel/path0/node_modules/@babel/runtime/helpers/asyncToGenerator.js");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignInButton = void 0;

var tslib_1 = require("tslib");

var react_1 = tslib_1.__importDefault(require("react"));

var utils_1 = require("../utils");

var withClerk_1 = require("./withClerk");

exports.SignInButton = (0, withClerk_1.withClerk)(function(_a) {
    var clerk = _a.clerk,
        children = _a.children,
        props = tslib_1.__rest(_a, ["clerk", "children"]);

    var afterSignInUrl = props.afterSignInUrl,
        afterSignUpUrl = props.afterSignUpUrl,
        redirectUrl = props.redirectUrl,
        mode = props.mode,
        rest = tslib_1.__rest(props, ["afterSignInUrl", "afterSignUpUrl", "redirectUrl", "mode"]);

    children = (0, utils_1.normalizeWithDefaultValue)(children, 'Sign in');
    var child = (0, utils_1.assertSingleChild)(children)('SignInButton');

    var clickHandler = function clickHandler() {
        var opts = {
            afterSignInUrl: afterSignInUrl,
            afterSignUpUrl: afterSignUpUrl,
            redirectUrl: redirectUrl
        };

        if (mode === 'modal') {
            return clerk.openSignIn(opts);
        }

        return clerk.redirectToSignIn(opts);
    };

    var wrappedChildClickHandler = /*#__PURE__*/ function() {
        var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(e) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, utils_1.safeExecute)(child.props.onClick)(e);

                        case 2:
                            return _context.abrupt("return", clickHandler());

                        case 3:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee);
        }));

        return function wrappedChildClickHandler(_x) {
            return _ref.apply(this, arguments);
        };
    }();

    var childProps = Object.assign(Object.assign({}, rest), {
        onClick: wrappedChildClickHandler
    });
    return react_1.default.cloneElement(child, childProps);
}, 'SignInButton');