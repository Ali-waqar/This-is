"use strict";

var _regeneratorRuntime = require("/vercel/path0/node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = require("/vercel/path0/node_modules/@babel/runtime/helpers/asyncToGenerator.js");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignInWithMetamaskButton = void 0;

var tslib_1 = require("tslib");

var react_1 = tslib_1.__importDefault(require("react"));

var utils_1 = require("../utils");

var withClerk_1 = require("./withClerk");

exports.SignInWithMetamaskButton = (0, withClerk_1.withClerk)(function(_a) {
    var clerk = _a.clerk,
        children = _a.children,
        props = tslib_1.__rest(_a, ["clerk", "children"]);

    var redirectUrl = props.redirectUrl,
        rest = tslib_1.__rest(props, ["redirectUrl"]);

    children = (0, utils_1.normalizeWithDefaultValue)(children, 'Sign in with Metamask');
    var child = (0, utils_1.assertSingleChild)(children)('SignInWithMetamaskButton');

    var clickHandler = /*#__PURE__*/ function() {
        var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
            var authenticate, _authenticate;

            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _authenticate = function _authenticate3() {
                                _authenticate = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    _context.next = 2;
                                                    return clerk.authenticateWithMetamask({
                                                        redirectUrl: redirectUrl
                                                    });

                                                case 2:
                                                case "end":
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee);
                                }));
                                return _authenticate.apply(this, arguments);
                            };

                            authenticate = function _authenticate2() {
                                return _authenticate.apply(this, arguments);
                            };

                            void authenticate();

                        case 3:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2);
        }));

        return function clickHandler() {
            return _ref.apply(this, arguments);
        };
    }();

    var wrappedChildClickHandler = /*#__PURE__*/ function() {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3(e) {
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            _context3.next = 2;
                            return (0, utils_1.safeExecute)(child.props.onClick)(e);

                        case 2:
                            return _context3.abrupt("return", clickHandler());

                        case 3:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3);
        }));

        return function wrappedChildClickHandler(_x) {
            return _ref2.apply(this, arguments);
        };
    }();

    var childProps = Object.assign(Object.assign({}, rest), {
        onClick: wrappedChildClickHandler
    });
    return react_1.default.cloneElement(child, childProps);
}, 'SignInWithMetamask');