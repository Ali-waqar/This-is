"use strict";

var _regeneratorRuntime = require("/vercel/path0/node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = require("/vercel/path0/node_modules/@babel/runtime/helpers/asyncToGenerator.js");

var _classCallCheck = require("/vercel/path0/node_modules/@babel/runtime/helpers/classCallCheck.js");

var _createClass = require("/vercel/path0/node_modules/@babel/runtime/helpers/createClass.js");

var _a, _IsomorphicClerk_loaded, _IsomorphicClerk_instance;

Object.defineProperty(exports, "__esModule", {
    value: true
});

var tslib_1 = require("tslib");

var errors_1 = require("./errors");

var utils_1 = require("./utils");

var IsomorphicClerk = /*#__PURE__*/ function() {
    function IsomorphicClerk(params) {
        var _this = this;

        _classCallCheck(this, IsomorphicClerk);

        this.clerkjs = null;
        this.preopenSignIn = null;
        this.preopenSignUp = null;
        this.premountSignInNodes = new Map();
        this.premountSignUpNodes = new Map();
        this.premountUserProfileNodes = new Map();
        this.premountUserButtonNodes = new Map();
        this.premountMethodCalls = new Map();
        this.loadedListeners = [];

        _IsomorphicClerk_loaded.set(this, false);

        this.addOnLoaded = function(cb) {
            _this.loadedListeners.push(cb);
        };

        this.emitLoaded = function() {
            _this.loadedListeners.forEach(function(cb) {
                return cb();
            });

            _this.loadedListeners = [];
        };

        this.hydrateClerkJS = /*#__PURE__*/ function() {
            var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(clerkjs) {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (clerkjs) {
                                    _context.next = 2;
                                    break;
                                }

                                throw new Error('Failed to hydrate latest Clerk JS');

                            case 2:
                                _this.clerkjs = clerkjs;

                                _this.premountMethodCalls.forEach(function(cb) {
                                    return cb();
                                });

                                if (_this.preopenSignIn !== null) {
                                    clerkjs.openSignIn(_this.preopenSignIn);
                                }

                                if (_this.preopenSignUp !== null) {
                                    clerkjs.openSignUp(_this.preopenSignUp);
                                }

                                _this.premountSignInNodes.forEach(function(props, node) {
                                    clerkjs.mountSignIn(node, props);
                                });

                                _this.premountSignUpNodes.forEach(function(props, node) {
                                    clerkjs.mountSignUp(node, props);
                                });

                                _this.premountUserProfileNodes.forEach(function(props, node) {
                                    clerkjs.mountUserProfile(node, props);
                                });

                                _this.premountUserButtonNodes.forEach(function(props, node) {
                                    clerkjs.mountUserButton(node, props);
                                });

                                tslib_1.__classPrivateFieldSet(_this, _IsomorphicClerk_loaded, true, "f");

                                _this.emitLoaded();

                                return _context.abrupt("return", _this.clerkjs);

                            case 13:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee);
            }));

            return function(_x) {
                return _ref.apply(this, arguments);
            };
        }();

        this.setSession = function(session, beforeEmit) {
            if (_this.clerkjs) {
                return _this.clerkjs.setSession(session, beforeEmit);
            } else {
                return Promise.reject();
            }
        };

        this.openSignIn = function(props) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.openSignIn(props);
            } else {
                _this.preopenSignIn = props;
            }
        };

        this.closeSignIn = function() {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.closeSignIn();
            } else {
                _this.preopenSignIn = null;
            }
        };

        this.openSignUp = function(props) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.openSignUp(props);
            } else {
                _this.preopenSignUp = props;
            }
        };

        this.closeSignUp = function() {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.closeSignUp();
            } else {
                _this.preopenSignUp = null;
            }
        };

        this.mountSignIn = function(node, props) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.mountSignIn(node, props);
            } else {
                _this.premountSignInNodes.set(node, props);
            }
        };

        this.unmountSignIn = function(node) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.unmountSignIn(node);
            } else {
                _this.premountSignInNodes.delete(node);
            }
        };

        this.mountSignUp = function(node, props) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.mountSignUp(node, props);
            } else {
                _this.premountSignUpNodes.set(node, props);
            }
        };

        this.unmountSignUp = function(node) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.unmountSignUp(node);
            } else {
                _this.premountSignUpNodes.delete(node);
            }
        };

        this.mountUserProfile = function(node, props) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.mountUserProfile(node, props);
            } else {
                _this.premountUserProfileNodes.set(node, props);
            }
        };

        this.unmountUserProfile = function(node) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.unmountUserProfile(node);
            } else {
                _this.premountUserProfileNodes.delete(node);
            }
        };

        this.mountUserButton = function(node, userButtonProps) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.mountUserButton(node, userButtonProps);
            } else {
                _this.premountUserButtonNodes.set(node, userButtonProps);
            }
        };

        this.unmountUserButton = function(node) {
            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                _this.clerkjs.unmountUserButton(node);
            } else {
                _this.premountUserButtonNodes.delete(node);
            }
        };

        this.addListener = function(listener) {
            var callback = function callback() {
                var _b;

                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.addListener(listener);
            };

            if (_this.clerkjs) {
                callback();
            } else {
                _this.premountMethodCalls.set('addListener', callback);
            }
        };

        this.navigate = function(to) {
            var callback = function callback() {
                var _b;

                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.navigate(to);
            };

            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                void callback();
            } else {
                _this.premountMethodCalls.set('navigate', callback);
            }
        };

        this.redirectToSignIn = function(opts) {
            var callback = function callback() {
                var _b;

                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.redirectToSignIn(opts);
            };

            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                void callback();
            } else {
                _this.premountMethodCalls.set('redirectToSignIn', callback);
            }
        };

        this.redirectToSignUp = function(opts) {
            var callback = function callback() {
                var _b;

                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.redirectToSignUp(opts);
            };

            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                void callback();
            } else {
                _this.premountMethodCalls.set('redirectToSignUp', callback);
            }
        };

        this.redirectToUserProfile = function() {
            var callback = function callback() {
                var _b;

                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.redirectToUserProfile();
            };

            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                callback();
            } else {
                _this.premountMethodCalls.set('redirectToUserProfile', callback);
            }
        };

        this.handleRedirectCallback = function(params) {
            var callback = function callback() {
                var _b;

                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.handleRedirectCallback(params);
            };

            if (_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f")) {
                void callback();
            } else {
                _this.premountMethodCalls.set('handleRedirectCallback', callback);
            }
        };

        this.handleMagicLinkVerification = /*#__PURE__*/ function() {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2(params) {
                var callback;
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                callback = function callback() {
                                    var _b;

                                    return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.handleMagicLinkVerification(params);
                                };

                                if (!(_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f"))) {
                                    _context2.next = 5;
                                    break;
                                }

                                return _context2.abrupt("return", callback());

                            case 5:
                                _this.premountMethodCalls.set('handleMagicLinkVerification', callback);

                            case 6:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2);
            }));

            return function(_x2) {
                return _ref2.apply(this, arguments);
            };
        }();

        this.authenticateWithMetamask = /*#__PURE__*/ function() {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3(params) {
                var callback;
                return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                callback = function callback() {
                                    var _b;

                                    return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.authenticateWithMetamask(params);
                                };

                                if (!(_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f"))) {
                                    _context3.next = 5;
                                    break;
                                }

                                return _context3.abrupt("return", callback());

                            case 5:
                                _this.premountMethodCalls.set('authenticateWithMetamask', callback);

                            case 6:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3);
            }));

            return function(_x3) {
                return _ref3.apply(this, arguments);
            };
        }();

        this.createOrganization = /*#__PURE__*/ function() {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4(params) {
                var callback;
                return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                callback = function callback() {
                                    var _b;

                                    return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.createOrganization(params);
                                };

                                if (!(_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f"))) {
                                    _context4.next = 5;
                                    break;
                                }

                                return _context4.abrupt("return", callback());

                            case 5:
                                _this.premountMethodCalls.set('createOrganization', callback);

                            case 6:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4);
            }));

            return function(_x4) {
                return _ref4.apply(this, arguments);
            };
        }();

        this.getOrganizationMemberships = /*#__PURE__*/ _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5() {
            var callback;
            return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            callback = function callback() {
                                var _b;

                                return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.getOrganizationMemberships();
                            };

                            if (!(_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f"))) {
                                _context5.next = 5;
                                break;
                            }

                            return _context5.abrupt("return", callback());

                        case 5:
                            _this.premountMethodCalls.set('getOrganizationMemberships', callback);

                        case 6:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, _callee5);
        }));

        this.getOrganization = /*#__PURE__*/ function() {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee6(organizationId) {
                var callback;
                return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                callback = function callback() {
                                    var _b;

                                    return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.getOrganization(organizationId);
                                };

                                if (!(_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f"))) {
                                    _context6.next = 5;
                                    break;
                                }

                                return _context6.abrupt("return", callback());

                            case 5:
                                _this.premountMethodCalls.set('getOrganization', callback);

                            case 6:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6);
            }));

            return function(_x5) {
                return _ref6.apply(this, arguments);
            };
        }();

        this.signOut = /*#__PURE__*/ function() {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee7(signOutCallbackOrOptions, options) {
                var callback;
                return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                callback = function callback() {
                                    var _b;

                                    return (_b = _this.clerkjs) === null || _b === void 0 ? void 0 : _b.signOut(signOutCallbackOrOptions, options);
                                };

                                if (!(_this.clerkjs && tslib_1.__classPrivateFieldGet(_this, _IsomorphicClerk_loaded, "f"))) {
                                    _context7.next = 5;
                                    break;
                                }

                                return _context7.abrupt("return", callback());

                            case 5:
                                _this.premountMethodCalls.set('signOut', callback);

                            case 6:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7);
            }));

            return function(_x6, _x7) {
                return _ref7.apply(this, arguments);
            };
        }();

        if (tslib_1.__classPrivateFieldGet(IsomorphicClerk, _a, "f", _IsomorphicClerk_instance)) {
            throw new Error('An IsomorphicClerk instance already exists. Use IsomorphicClerk.getOrCreateInstance instead');
        }

        var _ref8 = params || {},
            _ref8$Clerk = _ref8.Clerk,
            Clerk = _ref8$Clerk === void 0 ? null : _ref8$Clerk,
            frontendApi = _ref8.frontendApi,
            initialState = _ref8.initialState,
            _ref8$options = _ref8.options,
            options = _ref8$options === void 0 ? {} : _ref8$options;

        this.frontendApi = frontendApi;
        this.options = options;
        this.Clerk = Clerk;
        this.initialState = initialState;
        this.mode = (0, utils_1.inClientSide)() ? 'browser' : 'server';
    }

    _createClass(IsomorphicClerk, [{
        key: "loaded",
        get: function get() {
            return tslib_1.__classPrivateFieldGet(this, _IsomorphicClerk_loaded, "f");
        }
    }, {
        key: "loadClerkJS",
        value: function() {
            var _loadClerkJS = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee8() {
                var c, message;
                return _regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                if (!tslib_1.__classPrivateFieldGet(this, _IsomorphicClerk_loaded, "f")) {
                                    _context8.next = 2;
                                    break;
                                }

                                return _context8.abrupt("return");

                            case 2:
                                if (!this.frontendApi) {
                                    this.throwError(errors_1.noFrontendApiError);
                                }

                                _context8.prev = 3;

                                if (!this.Clerk) {
                                    _context8.next = 18;
                                    break;
                                }

                                if (!(0, utils_1.isConstructor)(this.Clerk)) {
                                    _context8.next = 11;
                                    break;
                                }

                                // Construct a new Clerk object if a constructor is passed
                                c = new this.Clerk(this.frontendApi);
                                _context8.next = 9;
                                return c.load(this.options);

                            case 9:
                                _context8.next = 15;
                                break;

                            case 11:
                                // Otherwise use the instantiated Clerk object
                                c = this.Clerk;

                                if (c.isReady()) {
                                    _context8.next = 15;
                                    break;
                                }

                                _context8.next = 15;
                                return c.load(this.options);

                            case 15:
                                global.Clerk = c;
                                _context8.next = 24;
                                break;

                            case 18:
                                _context8.next = 20;
                                return (0, utils_1.loadScript)({
                                    frontendApi: this.frontendApi,
                                    scriptUrl: this.options.clerkJSUrl,
                                    scriptVariant: this.options.clerkJSVariant
                                });

                            case 20:
                                if (global.Clerk) {
                                    _context8.next = 22;
                                    break;
                                }

                                throw new Error('Failed to download latest ClerkJS. Contact support@clerk.dev.');

                            case 22:
                                _context8.next = 24;
                                return global.Clerk.load(this.options);

                            case 24:
                                return _context8.abrupt("return", this.hydrateClerkJS(global.Clerk));

                            case 27:
                                _context8.prev = 27;
                                _context8.t0 = _context8["catch"](3);

                                if (_context8.t0 instanceof Error) {
                                    message = _context8.t0.message;
                                } else {
                                    message = String(_context8.t0);
                                }

                                this.throwError(message);
                                return _context8.abrupt("return");

                            case 32:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this, [
                    [3, 27]
                ]);
            }));

            function loadClerkJS() {
                return _loadClerkJS.apply(this, arguments);
            }

            return loadClerkJS;
        }() // Custom wrapper to throw an error, since we need to apply different handling between
        // production and development builds. In Next.js we can throw a full screen error in
        // development mode. However, in production throwing an error results in an infinite loop
        // as shown at https://github.com/vercel/next.js/issues/6973

    }, {
        key: "throwError",
        value: function throwError(errorMsg) {
            if (process.env.NODE_ENV === 'production') {
                console.error(errorMsg);
            }

            throw new Error(errorMsg);
        }
    }, {
        key: "version",
        get: function get() {
            var _b;

            return (_b = this.clerkjs) === null || _b === void 0 ? void 0 : _b.version;
        }
    }, {
        key: "client",
        get: function get() {
            if (this.clerkjs) {
                return this.clerkjs.client; // TODO: add ssr condition
            } else {
                return undefined;
            }
        }
    }, {
        key: "session",
        get: function get() {
            if (this.clerkjs) {
                return this.clerkjs.session; // TODO: add ssr condition
            } else {
                return undefined;
            }
        }
    }, {
        key: "user",
        get: function get() {
            if (this.clerkjs) {
                return this.clerkjs.user;
            } else {
                return undefined;
            }
        } // TODO: Remove temp use of __unstable__environment

    }, {
        key: "__unstable__environment",
        get: function get() {
            if (this.clerkjs) {
                return this.clerkjs.__unstable__environment; // TODO: add ssr condition
            } else {
                return undefined;
            }
        }
    }], [{
        key: "getOrCreateInstance",
        value: function getOrCreateInstance(params) {
            if (!tslib_1.__classPrivateFieldGet(this, _a, "f", _IsomorphicClerk_instance)) {
                tslib_1.__classPrivateFieldSet(this, _a, new IsomorphicClerk(params), "f", _IsomorphicClerk_instance);
            }

            return tslib_1.__classPrivateFieldGet(this, _a, "f", _IsomorphicClerk_instance);
        }
    }]);

    return IsomorphicClerk;
}();

exports.default = IsomorphicClerk;
_a = IsomorphicClerk, _IsomorphicClerk_loaded = new WeakMap();
_IsomorphicClerk_instance = {
    value: void 0
};