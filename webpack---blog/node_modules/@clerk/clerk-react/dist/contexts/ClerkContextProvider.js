"use strict";

var _slicedToArray = require("/vercel/path0/node_modules/@babel/runtime/helpers/slicedToArray.js");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ClerkContextProvider = void 0;

var tslib_1 = require("tslib");

var react_1 = tslib_1.__importDefault(require("react"));

var AuthContext_1 = require("./AuthContext");

var ClientContext_1 = require("./ClientContext");

var IsomorphicClerkContext_1 = require("./IsomorphicClerkContext");

var SessionContext_1 = require("./SessionContext");

var UserContext_1 = require("./UserContext");

function ClerkContextProvider(_ref) {
    var isomorphicClerk = _ref.isomorphicClerk,
        children = _ref.children,
        clerkLoaded = _ref.clerkLoaded;
    var clerk = isomorphicClerk;
    var initialState = clerk.initialState;

    var _react_1$default$useS = react_1.default.useState({
            client: clerk.client,
            session: clerk.session,
            user: clerk.user
        }),
        _react_1$default$useS2 = _slicedToArray(_react_1$default$useS, 2),
        state = _react_1$default$useS2[0],
        setState = _react_1$default$useS2[1];

    var derivedState = deriveState(clerkLoaded, state, initialState);
    react_1.default.useEffect(function() {
        return clerk.addListener(function(e) {
            return setState(Object.assign({}, e));
        });
    }, []);
    var clerkCtx = react_1.default.useMemo(function() {
        return {
            value: clerk
        };
    }, [clerkLoaded]);
    var clientCtx = react_1.default.useMemo(function() {
        return {
            value: state.client
        };
    }, [state.client]);
    var authCtx = react_1.default.useMemo(function() {
        return {
            value: {
                sessionId: derivedState.sessionId,
                userId: derivedState.userId
            }
        };
    }, [derivedState.sessionId, derivedState.userId]);
    var userCtx = react_1.default.useMemo(function() {
        return {
            value: derivedState.user
        };
    }, [derivedState.userId, derivedState.user]);
    var sessionCtx = react_1.default.useMemo(function() {
        return {
            value: derivedState.session
        };
    }, [derivedState.sessionId, derivedState.session]);
    return react_1.default.createElement(IsomorphicClerkContext_1.IsomorphicClerkContext.Provider, {
        value: clerkCtx
    }, react_1.default.createElement(ClientContext_1.ClientContext.Provider, {
        value: clientCtx
    }, react_1.default.createElement(SessionContext_1.SessionContext.Provider, {
        value: sessionCtx
    }, react_1.default.createElement(AuthContext_1.AuthContext.Provider, {
        value: authCtx
    }, react_1.default.createElement(UserContext_1.UserContext.Provider, {
        value: userCtx
    }, children)))));
}

exports.ClerkContextProvider = ClerkContextProvider; // This should be provided from isomorphicClerk
// TODO: move inside isomorphicClerk

function deriveState(clerkLoaded, state, initialState) {
    if (!clerkLoaded && initialState) {
        var _userId = initialState.userId; // TODO: Instantiate an actual user resource

        var _user = initialState.user;
        var _sessionId = initialState.sessionId; // TODO: Instantiate an actual session resource

        var _session = initialState.session;
        return {
            sessionId: _sessionId,
            session: _session,
            userId: _userId,
            user: _user
        };
    }

    var userId = state.user ? state.user.id : state.user;
    var user = state.user;
    var sessionId = state.session ? state.session.id : state.session;
    var session = state.session;
    return {
        sessionId: sessionId,
        session: session,
        userId: userId,
        user: user
    };
}